#' check_file_ext.R
#'
#' Check if the resource file extension matches the field_form value
#'
#' @param metadata_resources list: object returned by get_metadata_resources
#' @param credentials list: object returned by the get_credentials() function
#'
#' @return dataframe
#' @export
#'

check_file_ext <- function(metadata_resources,
                           lovs = ddhconnect::get_lovs()){

  field_formats <- vector(mode = "character", length(metadata_resources))
  file_exts <- vector(mode = "character", length(metadata_resources))

  for (i in 1:length(metadata_resources)){
    resource <- metadata_resources[[i]]

    field_formats[i] <- extract_field_format(resource, lovs)
    file_exts[i] <- resource %>%
                      extract_file_path %>%
                      return_file_ext
  }

  results <- data.frame(resource_nid = names(metadata_resources),
                   field_formats,
                   file_exts)
  return(results)
}

######[ NOTES ]######
# LOCATIONS WHERE THE LINK COULD BE
# field_link_api$und[[1]]$url
# field_link_remote_file$und[[1]]$url
# field_upload$und[[1]]$url
# null values persist since fields are not req, catch nulls early

# find field_format, expected val for the file type

# general workflow
# MEERA, THIS IS SPARK NOTATION (>X_X<)
# field_formats <- metadata_resources %>%
#   extract_field_format(lovs)
#
# file_exts <- metadata_resources %>%
#   extract_file_path %>%
#   return_file_ext
#
# check_valid_file_ext

# CURRENTLY IN DEV
matching_vals <- function() {
  matching <- grep(val, file_ext, ignore.case = TRUE)
  # print(matching)
  if (matching == 0) {
    print(nid, file_ext, expected_val)
  }
  return(c(expected_val, file_ext))
}
